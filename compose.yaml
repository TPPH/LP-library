version: '3.8'

services:
  oauth-service:
    image: tpph/oauth-service:v1.0.8
    container_name: oauth-service
    ports:
      - "8082:8082"
    networks:
      - my-network

  song-service:
    image: tpph/song-service:v1.0.8
    container_name: song-service
    ports:
      - "8083:8083"
    networks:
      - my-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_TOPIC_NAME: song-topic
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/song_db
      SPRING_DATASOURCE_USERNAME: song_user
      SPRING_DATASOURCE_PASSWORD: song_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
    depends_on:
      kafka:
        condition: service_started
      oauth-service:
        condition: service_started
      song-db:
        condition: service_started

  streaming-service:
    image: tpph/streaming-service:v1.0.8
    container_name: streaming-service
    ports:
      - "8084:8084"
    networks:
      - my-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_TOPIC_NAME: streaming-topic
    depends_on:
      kafka:
        condition: service_started
      song-service:
        condition: service_started
    restart: always

  favorites-service:
    image: tpph/favorites-service:test
    container_name: favorites-service
    ports:
      - "8080:8080"
    networks:
      - my-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://favorites-db:5432/favoritesdb
      SPRING_DATASOURCE_USERNAME: favorites_user
      SPRING_DATASOURCE_PASSWORD: favorites_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: https://song-api-endpoint/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_AUDIENCE: <your-api-identifier>
    depends_on:
      kafka:
        condition: service_started
      favorites-db:
        condition: service_started
      oauth-service:
        condition: service_started


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    networks:
      - my-network
    depends_on:
      - sonar-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      retries: 3

  song-db:
    image: postgres:latest
    container_name: song-db
    environment:
      POSTGRES_PASSWORD: song_password
      POSTGRES_DB: song_db
      POSTGRES_USER: song_user
    ports:
      - "5432:5432"
    networks:
      - my-network

  favorites-db:
    image: postgres:latest
    container_name: favorites-db
    environment:
      POSTGRES_PASSWORD: favorites_password
      POSTGRES_DB: favoritesdb
      POSTGRES_USER: favorites_user
    ports:
      - "5433:5432"
    networks:
      - my-network

  sonar-db:
    image: postgres:latest
    container_name: sonar-db
    environment:
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
      POSTGRES_USER: sonar
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
