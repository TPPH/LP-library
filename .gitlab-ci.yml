stages:
  - build
  - test
  - sonarqube
  - Security
  - push
  - deploy

variables:
  SONARQUBE_URL: "http://sonarqube:9000"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GIT_DEPTH: 0
  IMAGE_TAG: $CI_COMMIT_TAG
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x gradlew

cache:
  key: "$CI_PROJECT_ID"
  paths:
    - .gradle/

##########################
# BUILD JOBS
##########################

build:oauth:
  stage: build
  image: gradle:jdk17
  script:
    - ./gradlew :OauthService:clean :OauthService:build
  artifacts:
    paths:
      - OauthService/build/libs/
  rules:
    - changes:
        - OauthService/**/*

build:song:
  stage: build
  image: gradle:jdk17
  script:
    - ./gradlew :SongService:clean :SongService:build
  artifacts:
    paths:
      - SongService/build/libs/
  rules:
    - changes:
        - SongService/**/*

build:streaming:
  stage: build
  image: gradle:jdk17
  script:
    - ./gradlew :StreamingService:clean :StreamingService:build
  artifacts:
    paths:
      - StreamingService/build/libs/
  rules:
    - changes:
        - StreamingService/**/*

build:favorites:
  stage: build
  image: gradle:jdk17
  script:
    - ./gradlew :FavoritesService:clean :FavoritesService:build
  artifacts:
    paths:
      - FavoritesService/build/libs/
  rules:
    - changes:
        - FavoritesService/**/*

##########################
# TEST JOB
##########################

#test:
#  stage: test
#  image: gradle:jdk17
#  script:
#    - ./gradlew test

##########################
# SONARQUBE JOB
##########################

#sonarqube:
#  stage: sonarqube
#  image: gradle:jdk17
#  script:
#   - ./gradlew sonarqube -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONARQUBE_URL
#  rules:
#    - if: '$CI_COMMIT_TAG'
#  allow_failure: true

##########################
# SNYK-SECURITY JOB
##########################

snyk_security:
  stage: Security
  image: trion/ng-cli-karma
  script:
    - apt-get update && apt-get install -y openjdk-11-jdk  # install JDK
    - npm install -g snyk snyk-to-html
    - snyk auth $SNYK_TOKEN
    - mvn clean verify                                     # build project & download deps
    - snyk test --all-projects --json | snyk-to-html -o results-java.html
  artifacts:
    paths:
      - "results-java.html"
    expire_in: 30 days
    when: always
  allow_failure: true

##########################
# DOCKER PUSH JOBS (only if tag + changed)
##########################

docker:oauth:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t $DOCKER_USER/oauth-service:$IMAGE_TAG ./OauthService
    - docker push $DOCKER_USER/oauth-service:$IMAGE_TAG
  dependencies:
    - build:oauth
  rules:
    - if: '$CI_COMMIT_TAG'
      changes:
        - OauthService/**/*

docker:song:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t $DOCKER_USER/song-service:$IMAGE_TAG ./SongService
    - docker push $DOCKER_USER/song-service:$IMAGE_TAG
  dependencies:
    - build:song
  rules:
    - if: '$CI_COMMIT_TAG'
      changes:
        - SongService/**/*

docker:streaming:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t $DOCKER_USER/streaming-service:$IMAGE_TAG ./StreamingService
    - docker push $DOCKER_USER/streaming-service:$IMAGE_TAG
  dependencies:
    - build:streaming
  rules:
    - if: '$CI_COMMIT_TAG'
      changes:
        - StreamingService/**/*

docker:favorites:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
  script:
    - docker build -t $DOCKER_USER/favorites-service:$IMAGE_TAG ./FavoritesService
    - docker push $DOCKER_USER/favorites-service:$IMAGE_TAG
  dependencies:
    - build:favorites
  rules:
    - if: '$CI_COMMIT_TAG'
      changes:
        - FavoritesService/**/*

##########################
# DEPLOY JOB
##########################

deploy:
  stage: deploy
  image: google/cloud-sdk
  script:
    - kubectl apply -f kubernetes/
  rules:
    - if: '$CI_COMMIT_TAG'
