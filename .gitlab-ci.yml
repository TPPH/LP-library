stages:
  - build
  - test
  - sonarqube
  - deploy

variables:
  SONARQUBE_URL: "http://sonarqube:9000"  # Point to SonarQube service in Docker network
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GIT_DEPTH: 0

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle  # Set Gradle user home to avoid using default
  - chmod +x gradlew  # Ensure gradlew is executable

cache:
  key: "$CI_PROJECT_ID"
  paths:
    - .gradle/

# Build stage
build:
  stage: build
  script:
    - echo ./gradlew clean build  # Clean and build your project

# Test stage
test:
  stage: test
  script:
    - echo ./gradlew test  # Ensure this runs your tests

# SonarQube analysis stage
sonarqube:
  stage: sonarqube
  script:
    - echo ./gradlew sonarqube -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONARQUBE_URL  # Use environment variable for SonarQube URL
  only:
    - master  # Run SonarQube analysis only on the master branch
  allow_failure: true  # Fail the pipeline if SonarQube analysis fails



deploy:
  stage: deploy
  script:
    - apt-get update
    - apt-get install -y apt-transport-https ca-certificates curl gnupg
    - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpgcurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
    - chmod 644 /etc/apt/sources.list.d/kubernetes.list
    - apt-get update
    - apt-get install -y kubectl
    - kubectl apply -f kubernetes